var _react2 = require('react');

var _react3 = _interopRequireDefault(_react2);

var _index = require('./../react-transform-hmr/lib/index.js');

var _index2 = _interopRequireDefault(_index);

var _jsxFileName = '/root/calculator/node_modules/react-native-wheel-picker-android/DatePicker.js';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _reactNative = require('react-native');

var _WheelPicker = require('./WheelPicker');

var _WheelPicker2 = _interopRequireDefault(_WheelPicker);

var _moment = require('moment');

var _moment2 = _interopRequireDefault(_moment);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _components = {
  DatePicker: {
    displayName: 'DatePicker'
  }
};

var _reactTransformHmrLibIndexJs2 = (0, _index2.default)({
  filename: '/root/calculator/node_modules/react-native-wheel-picker-android/DatePicker.js',
  components: _components,
  locals: [module],
  imports: [_react3.default]
});

function _wrapComponent(id) {
  return function (Component) {
    return _reactTransformHmrLibIndexJs2(Component, id);
  };
}

var DatePicker = _wrapComponent('DatePicker')(function (_React$Component) {
  _inherits(DatePicker, _React$Component);

  function DatePicker(props) {
    _classCallCheck(this, DatePicker);

    var _this = _possibleConstructorReturn(this, (DatePicker.__proto__ || Object.getPrototypeOf(DatePicker)).call(this, props));

    _this.selectedDate = _this.props.initDate ? new Date(_this.props.initDate) : new Date();
    var time12format = hourTo12Format(_this.selectedDate.getHours());
    var time24format = _this.selectedDate.getHours();

    var millisecondsPerDay = 1000 * 60 * 60 * 24;
    var millisBetween = _this.selectedDate.getTime() - new Date().getTime();

    var millisBetweenStartDate = void 0,
        daysStartDate = void 0;
    if (_this.props.startDate) {
      millisBetweenStartDate = new Date(_this.props.startDate).getTime() - new Date().getTime();
      daysStartDate = millisBetweenStartDate / millisecondsPerDay;
    }

    var days = millisBetween / millisecondsPerDay;
    _this.daysAfterSelectedDate = Math.round(daysStartDate);
    _this.initDayInex = _this.props.startDate ? Math.round(days) - Math.round(daysStartDate) : Math.round(days);
    _this.initHourInex = _this.props.format24 ? time24format : time12format[0] - 1;
    _this.initMinuteInex = Math.round(_this.selectedDate.getMinutes() / 5);
    _this.initAmInex = time12format[1] === 'AM' ? 0 : 1;
    return _this;
  }

  _createClass(DatePicker, [{
    key: 'render',
    value: function render() {
      var _this2 = this;

      return _react3.default.createElement(
        _reactNative.View,
        { style: styles.container, __source: {
            fileName: _jsxFileName,
            lineNumber: 36
          }
        },
        _react3.default.createElement(_WheelPicker2.default, {
          style: styles.dateWheelPicker,
          isAtmospheric: true,
          isCurved: true,
          visibleItemCount: 8,
          data: this.props.days ? this.props.days : PickerDateArray(this.props.startDate, this.props.daysCount),
          selectedItemTextColor: 'black',
          onItemSelected: function onItemSelected(data) {
            return _this2.onDaySelected(data);
          },
          selectedItemPosition: this.initDayInex,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 37
          }
        }),
        _react3.default.createElement(_WheelPicker2.default, {
          style: styles.wheelPicker,
          isAtmospheric: true,
          isCyclic: true,
          isCurved: true,
          visibleItemCount: 8,
          data: this.props.hours ? this.props.hours : getHoursArray(),
          selectedItemTextColor: 'black',
          onItemSelected: function onItemSelected(data) {
            return _this2.onHourSelected(data);
          },
          selectedItemPosition: this.initHourInex,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 47
          }
        }),
        _react3.default.createElement(_WheelPicker2.default, {
          style: styles.wheelPicker,
          isAtmospheric: true,
          isCyclic: true,
          isCurved: true,
          visibleItemCount: 8,
          data: this.props.minutes ? this.props.minutes : getFiveMinutesArray(),
          selectedItemTextColor: 'black',
          onItemSelected: function onItemSelected(data) {
            return _this2.onMinuteSelected(data);
          },
          selectedItemPosition: this.initMinuteInex,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 58
          }
        }),
        this.renderAm()
      );
    }
  }, {
    key: 'renderAm',
    value: function renderAm() {
      var _this3 = this;

      if (!this.props.format24) {
        return _react3.default.createElement(_WheelPicker2.default, {
          style: styles.wheelPicker,
          isAtmospheric: true,
          isCurved: true,
          visibleItemCount: 8,
          data: getAmArray(),
          selectedItemTextColor: 'black',
          onItemSelected: function onItemSelected(data) {
            return _this3.onAmSelected(data);
          },
          selectedItemPosition: this.initAmInex,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 77
          }
        });
      }
    }
  }, {
    key: 'onDaySelected',
    value: function onDaySelected(event) {
      var hours = this.selectedDate.getHours();
      var minutes = this.selectedDate.getMinutes();
      if (event.data === 'Today') {
        this.selectedDate = new Date();
      } else {
        this.selectedDate = increaseDateByDays(new Date(), this.props.startDate ? this.daysAfterSelectedDate + event.position : event.position);
      }
      this.selectedDate.setHours(hours);
      this.selectedDate.setMinutes(minutes);
      this.onDateSelected();
    }
  }, {
    key: 'onHourSelected',
    value: function onHourSelected(event) {
      if (this.props.format24) {
        this.selectedDate.setHours(event.data);
      } else {
        var time12format = hourTo12Format(this.selectedDate.getHours());
        var newTime12Format = event.data + ' ' + time12format[1];
        var selectedHour24format = hourTo24Format(newTime12Format);
        this.selectedDate.setHours(selectedHour24format);
      }
      this.onDateSelected();
    }
  }, {
    key: 'onMinuteSelected',
    value: function onMinuteSelected(event) {
      this.selectedDate.setMinutes(event.data);
      this.onDateSelected();
    }
  }, {
    key: 'onAmSelected',
    value: function onAmSelected(event) {
      var time12format = hourTo12Format(this.selectedDate.getHours());
      var newTime12Format = time12format[0] + ' ' + event.data;
      var selectedHour24format = hourTo24Format(newTime12Format);
      this.selectedDate.setHours(selectedHour24format);
      this.onDateSelected();
    }
  }, {
    key: 'onDateSelected',
    value: function onDateSelected() {
      if (this.props.onDateSelected) {
        this.props.onDateSelected(this.selectedDate);
      }
    }
  }]);

  return DatePicker;
}(_react3.default.Component));

DatePicker.propTypes = {
  initDate: _react3.default.PropTypes.string,
  onDateSelected: _react3.default.PropTypes.func,
  startDate: _react3.default.PropTypes.string,
  daysCount: _react3.default.PropTypes.number,
  days: _react3.default.PropTypes.array,
  hours: _react3.default.PropTypes.array,
  minutes: _react3.default.PropTypes.array,
  format24: _react3.default.PropTypes.bool
};

var styles = _reactNative.StyleSheet.create({
  container: {
    flex: 1,
    alignItems: 'center',
    flexDirection: 'row'
  },
  wheelPicker: {
    height: 150,
    width: null,
    flex: 1
  },
  dateWheelPicker: {
    height: 200,
    width: null,
    flex: 3
  }
});

function hourTo24Format(hour) {
  return parseInt((0, _moment2.default)(hour, ['h A']).format('H'), 10);
}

function hourTo12Format(hour) {
  var currDate = new Date();
  currDate.setHours(hour);
  return dateTo12Hour(currDate.toISOString());
}

var dateTo12Hour = function dateTo12Hour(dateString) {
  var localDate = new Date(dateString);
  var hour = localDate.getHours();
  if (hour === 12) {
    return ['12', 'PM'];
  }if (hour === 0) {
    return ['12', 'AM'];
  }
  var afterMidday = hour % 12 === hour;
  hour = afterMidday ? hour : hour % 12;
  var amPm = afterMidday ? 'AM' : 'PM';
  return [hour.toString(), amPm];
};

function increaseDateByDays(date, numOfDays) {
  var nextDate = new Date(date.valueOf());
  nextDate.setDate(nextDate.getDate() + numOfDays);
  return nextDate;
}

var PickerDateArray = function PickerDateArray(startDate, daysCount) {
  startDate = startDate ? new Date(startDate) : new Date();
  daysCount = daysCount ? daysCount : 365;
  var arr = [];
  for (var i = 0; i < daysCount; i++) {
    if (i === 0 && startDate.getDate() === new Date().getDate()) {
      arr.push('Today');
    } else {
      arr.push(formatDatePicker(new Date(new Date().setDate(startDate.getDate() + i))));
    }
  }
  return arr;
};

function formatDatePicker(date) {
  var strDate = (0, _moment2.default)(date).format('ddd MMM D');
  return strDate;
}

function getHoursArray() {
  var arr = [];
  for (var i = 1; i < 13; i++) {
    arr.push(i);
  }
  return arr;
}

function getFiveMinutesArray() {
  var arr = [];
  arr.push('00');
  arr.push('05');
  for (var i = 10; i < 60; i += 5) {
    arr.push('' + i);
  }
  return arr;
}

function getAmArray() {
  var arr = [];
  arr.push('AM');
  arr.push('PM');
  return arr;
}
module.exports = DatePicker;