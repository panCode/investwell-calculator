Object.defineProperty(exports, "__esModule", {
  value: true
});

var _react2 = require('react');

var _react3 = _interopRequireDefault(_react2);

var _index = require('./../../react-transform-hmr/lib/index.js');

var _index2 = _interopRequireDefault(_index);

var _jsxFileName = '/root/calculator/node_modules/react-native-pathjs-charts/src/Line.js';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _reactNative = require('react-native');

var _reactNativeSvg = require('react-native-svg');

var _reactNativeSvg2 = _interopRequireDefault(_reactNativeSvg);

var _util = require('./util');

var _Axis = require('./Axis');

var _Axis2 = _interopRequireDefault(_Axis);

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _components = {
  LineChart: {
    displayName: 'LineChart'
  }
};

var _reactTransformHmrLibIndexJs2 = (0, _index2.default)({
  filename: '/root/calculator/node_modules/react-native-pathjs-charts/src/Line.js',
  components: _components,
  locals: [module],
  imports: [_react3.default]
});

function _wrapComponent(id) {
  return function (Component) {
    return _reactTransformHmrLibIndexJs2(Component, id);
  };
}

var LineChart = _wrapComponent('LineChart')(function (_Component) {
  _inherits(LineChart, _Component);

  function LineChart(props, chartType) {
    _classCallCheck(this, LineChart);

    var _this = _possibleConstructorReturn(this, (LineChart.__proto__ || Object.getPrototypeOf(LineChart)).call(this, props));

    _this.chartType = chartType;
    return _this;
  }

  _createClass(LineChart, [{
    key: 'getMaxAndMin',
    value: function getMaxAndMin(chart, key, scale, chartMin, chartMax) {
      var maxValue = void 0;
      var minValue = void 0;
      _lodash2.default.each(chart.curves, function (serie) {
        var values = _lodash2.default.map(serie.item, function (item) {
          return item[key];
        });

        var max = _lodash2.default.max(values);
        if (maxValue === undefined || max > maxValue) maxValue = max;
        var min = _lodash2.default.min(values);
        if (minValue === undefined || min < minValue) minValue = min;

        maxValue = chartMax > maxValue ? chartMax : maxValue;
        minValue = chartMin < minValue ? chartMin : minValue;
      });

      return {
        minValue: minValue,
        maxValue: maxValue,
        min: scale(minValue),
        max: scale(maxValue)
      };
    }
  }, {
    key: 'color',
    value: function color(i) {
      var color = this.props.options.color;
      if (!_lodash2.default.isString(this.props.options.color)) color = color.color;
      var pallete = this.props.pallete || _util.Colors.mix(color || '#9ac7f7');
      return _util.Colors.string((0, _util.cyclic)(pallete, i));
    }
  }, {
    key: 'render',
    value: function render() {
      var noDataMsg = this.props.noDataMessage || 'No data available';
      if (this.props.data === undefined) return _react3.default.createElement(
        _reactNative.Text,
        {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 67
          }
        },
        noDataMsg
      );

      var options = new _util.Options(this.props);

      var accessor = function accessor(key) {
        return function (x) {
          return x[key];
        };
      };

      var chart = this.chartType({
        data: this.props.data,
        xaccessor: accessor(this.props.xKey),
        yaccessor: accessor(this.props.yKey),
        width: options.chartWidth,
        height: options.chartHeight,
        closed: false,
        min: options.min,
        max: options.max
      });

      var chartArea = {
        x: this.getMaxAndMin(chart, this.props.xKey, chart.xscale),
        y: this.getMaxAndMin(chart, this.props.yKey, chart.yscale, options.min, options.max),
        margin: options.margin
      };

      var showAreas = typeof this.props.options.showAreas !== 'undefined' ? this.props.options.showAreas : true;
      var strokeWidth = typeof this.props.options.strokeWidth !== 'undefined' ? this.props.options.strokeWidth : '1';
      var lines = _lodash2.default.map(chart.curves, function (c, i) {
        return _react3.default.createElement(_reactNativeSvg.Path, { key: 'lines' + i, d: c.line.path.print(), stroke: this.color(i), strokeWidth: strokeWidth, fill: 'none', __source: {
            fileName: _jsxFileName,
            lineNumber: 97
          }
        });
      }.bind(this));
      var areas = null;

      if (showAreas) {
        areas = _lodash2.default.map(chart.curves, function (c, i) {
          return _react3.default.createElement(_reactNativeSvg.Path, { key: 'areas' + i, d: c.area.path.print(), fillOpacity: 0.5, stroke: 'none', fill: this.color(i), __source: {
              fileName: _jsxFileName,
              lineNumber: 103
            }
          });
        }.bind(this));
      }

      var textStyle = (0, _util.fontAdapt)(options.label);
      var regions = void 0;
      if (this.props.regions != 'undefined') {
        var styling = typeof this.props.regionStyling != 'undefined' ? this.props.regionStyling : {};
        var labelOffsetAllRegions = typeof styling.labelOffset != 'undefined' ? styling.labelOffset : {};

        regions = _lodash2.default.map(this.props.regions, function (c, i) {
          var x = void 0,
              y = void 0,
              height = void 0,
              width = void 0,
              y1 = void 0,
              y2 = void 0,
              labelX = void 0,
              labelY = void 0;

          var labelOffset = typeof c.labelOffset != 'undefined' ? c.labelOffset : {};
          var labelOffsetLeft = typeof labelOffsetAllRegions.left != 'undefined' ? typeof labelOffset.left != 'undefined' ? labelOffset.left : labelOffsetAllRegions.left : 20;
          var labelOffsetTop = typeof labelOffsetAllRegions.top != 'undefined' ? typeof labelOffset.top != 'undefined' ? labelOffset.top : labelOffsetAllRegions.top : 0;
          var fillOpacity = typeof styling.fillOpacity != 'undefined' ? typeof c.fillOpacity != 'undefined' ? c.fillOpacity : styling.fillOpacity : 0.5;

          y1 = chart.yscale(c.from);
          y2 = chart.yscale(c.to);

          x = 0;
          y = y1;
          height = y2 - y1;
          width = chartArea.x.max;

          labelX = labelOffsetLeft;
          labelY = y2 + labelOffsetTop;

          var regionLabel = typeof c.label != 'undefined' ? _react3.default.createElement(
            _reactNativeSvg.Text,
            { fontFamily: textStyle.fontFamily,
              fontSize: textStyle.fontSize,
              fontWeight: textStyle.fontWeight,
              fontStyle: textStyle.fontStyle,
              fill: textStyle.fill,
              textAnchor: 'middle',
              x: labelX,
              y: labelY, __source: {
                fileName: _jsxFileName,
                lineNumber: 142
              }
            },
            c.label
          ) : null;

          return _react3.default.createElement(
            _reactNativeSvg.G,
            { key: 'region' + i, __source: {
                fileName: _jsxFileName,
                lineNumber: 153
              }
            },
            _react3.default.createElement(_reactNativeSvg.Rect, { key: 'region' + i, x: x, y: y, width: width, height: height,
              fill: c.fill, fillOpacity: fillOpacity, __source: {
                fileName: _jsxFileName,
                lineNumber: 154
              }
            }),
            regionLabel
          );
        }.bind(this));
      }

      var returnValue = _react3.default.createElement(
        _reactNativeSvg2.default,
        { width: options.width, height: options.height, __source: {
            fileName: _jsxFileName,
            lineNumber: 162
          }
        },
        _react3.default.createElement(
          _reactNativeSvg.G,
          { x: options.margin.left, y: options.margin.top, __source: {
              fileName: _jsxFileName,
              lineNumber: 163
            }
          },
          regions,
          areas,
          lines,
          _react3.default.createElement(_Axis2.default, { key: 'x', scale: chart.xscale, options: options.axisX, chartArea: chartArea, __source: {
              fileName: _jsxFileName,
              lineNumber: 167
            }
          }),
          _react3.default.createElement(_Axis2.default, { key: 'y', scale: chart.yscale, options: options.axisY, chartArea: chartArea, __source: {
              fileName: _jsxFileName,
              lineNumber: 168
            }
          })
        )
      );

      return returnValue;
    }
  }]);

  return LineChart;
}(_react2.Component));

exports.default = LineChart;